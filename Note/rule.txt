# DEVELOPMENT RULES & GUIDELINES

## 🏗️ ARCHITECTURE RULES

### Composables Structure (/src/composables/)
- **useAuth.js**: All authentication logic (login, signup, logout, social auth)
- **useStorage.js**: localStorage operations (remember me, data persistence)
- **useLanguage.js**: Global language state, translations, text management, language persistence
- **useTheme.js**: Theme color management, theme persistence via localStorage
- **useErrorHandler.js**: Centralized error handling with consistent messages

### Component Rules
- Use Composition API with setup()
- Import composables, not direct Firebase/localStorage
- Watch props for language sync: `watch(() => props.currentLanguage, syncWithProp, { immediate: true })`
- Return all template-used variables/methods from setup()

## 🔄 STATE MANAGEMENT

### Language System
- Global state in useLanguage: `const globalLanguage = ref('vi')`
- All components sync with global state via `syncWithProp()`
- Parent components use `toggleLanguage()` to change language
- Text via `getText(key)` - never hardcode strings
- Auto-save language to localStorage on change
- Auto-load language from localStorage on init

### Theme System
- Global theme management via useTheme composable
- Save theme color to localStorage when changed
- Load saved theme on app initialization
- Apply theme via CSS variables: `--theme-color`

### Auth State
- Single auth listener in useAuth composable
- User state shared across all components
- Auto-cleanup on component unmount

## 🔄 PERSISTENCE RULES

### localStorage Usage
- Always use composables for localStorage operations
- Language persistence: key `appLanguage`, values `'vi'` or `'en'`
- Theme persistence: key `appTheme`, value hex color code
- Error handling for localStorage operations
- Auto-load saved data on app initialization

### Component Initialization
- Use `onMounted()` to initialize persistent data
- Call `initTheme()` in main view components (Home.vue, Login.vue)
- Ensure localStorage data is loaded before component renders

## 🎯 CODE STANDARDS

### NO Ternary Operators
```javascript
// ❌ Bad
const text = isVi ? 'Đăng nhập' : 'Login'

// ✅ Good
let text
if (isVi) {
  text = 'Đăng nhập'
} else {
  text = 'Login'
}
```

### Error Handling
- Always use `showError(error, context)` from useErrorHandler
- Never direct alert() - use composable methods
- Context types: 'login', 'signup', 'google', 'facebook', 'reset', 'logout'

### File Comments
```javascript
/*
Component purpose and main logic
- Feature 1: Description
- Feature 2: Description
- Updated: Brief description of changes
*/
```

## 📁 FILE STRUCTURE

```
src/
├── composables/          # Reusable logic
│   ├── useAuth.js       # Authentication
│   ├── useStorage.js    # localStorage operations
│   ├── useLanguage.js   # Language + persistence
│   ├── useTheme.js      # Theme + persistence
│   └── useErrorHandler.js
├── components/          # UI components
├── view/               # Page views
├── firebase/           # Firebase config
└── router/            # Vue Router
```

## 🚫 FORBIDDEN PRACTICES

- ❌ Direct Firebase imports in components
- ❌ Direct localStorage usage in components  
- ❌ Duplicate auth state management
- ❌ Hardcoded text strings
- ❌ Ternary operators for complex logic
- ❌ Multiple onAuthStateChanged listeners
- ❌ Props mutation
- ❌ Direct CSS variable manipulation in components

## ✅ REQUIRED PRACTICES

- ✅ Use composables for all logic
- ✅ Watch props for reactivity
- ✅ Global language state
- ✅ Consistent error handling
- ✅ Clean component separation
- ✅ Return setup() values
- ✅ Immediate watch for props
- ✅ localStorage persistence via composables
- ✅ Initialize persistent data in onMounted()
- ✅ Theme management via useTheme composable

## 🔧 DEBUGGING CHECKLIST

1. **Language not working**: Check if component watches props and calls syncWithProp
2. **Auth issues**: Verify useAuth composable import and user state binding
3. **Errors not showing**: Ensure useErrorHandler is imported and used
4. **State not syncing**: Check global state usage in composables
5. **Components breaking**: Verify all template variables returned from setup()
6. **Theme not persisting**: Check useTheme import and initTheme() call
7. **Language not persisting**: Verify localStorage operations in useLanguage
8. **Data not loading**: Ensure onMounted() calls initialization functions

## 📝 COMMIT STANDARDS

- feat: new functionality
- fix: bug fixes  
- refactor: code restructuring
- style: UI/CSS changes
- docs: documentation updates
- persist: localStorage/persistence features